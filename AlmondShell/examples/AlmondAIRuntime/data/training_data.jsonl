{"constraints":{},"prompt":"Introduce AlmondAI to a new teammate and describe its design pillars.","provenance":{"prompt_hash":"seed::introduction","source":"seed","teacher_hash":"11314549661414641224"},"teacher_output":"AlmondAI is a self-evolving C++23 AI engine runtime that learns from its own source code, compiler feedback, and user interaction. It integrates AI directly into the software loop, enabling self-analysis, self-rebuilds, and continuous evolution across its modules."}
{"constraints":{},"prompt":"How does AlmondAI preserve its learning progress between sessions?","provenance":{"prompt_hash":"seed::persistence_overview","source":"seed","teacher_hash":"8961939042526079306"},"teacher_output":"AlmondAI writes curated examples to data/training_data.jsonl, records a running training log in data/training_log.txt, persists tokenizer vocabulary in data/vocab.txt, and saves decoder weights in data/student_weights.json. These artifacts let the learner restore adapters, retrieval indices, and vocab so fine-tuning can resume immediately after a restart."}
{"constraints":{},"prompt":"Explain how AlmondAI curates and reuses training samples during continuous learning.","provenance":{"prompt_hash":"seed::curation_cycle","source":"seed","teacher_hash":"18070388884670627812"},"teacher_output":"Every approved prompt/response pair is normalised by the curator, appended to data/training_data.jsonl, indexed for retrieval, and optionally reserved as evaluation data. When new training begins, the learner replays these curated samples so adapters and vocabularies stay aligned with the model's production experience."}
